{"version":3,"sources":["utils/clustering.ts","components/uses/useScatterData.tsx","components/atoms/Selector.tsx","components/molecules/SelectorPanel.tsx","components/atoms/Slider.tsx","components/molecules/SliderPanel.tsx","components/uses/useHighlight.tsx","components/organisms/Scatter.tsx","components/uses/useDetailsData.tsx","components/uses/getDomains.tsx","components/organisms/Details.tsx","components/uses/useParallelData.tsx","components/uses/useColor.tsx","components/organisms/Parallel.tsx","components/organisms/Header.tsx","components/templates/Index.tsx","pages/Index.tsx","resolvers.ts","App.tsx","data/initialState.js","serviceWorker.ts","index.tsx"],"names":["clustering","data","client","k","Number","x","y","array1","map","item","array2","centers","index","center","Math","floor","random","max","min","push","chosendata","length","ans","kmeans","initialization","clusters","getColor","str","hue","toString","charCodeAt","processedData","color","rgbToHex","hslToRgb","opacity","writeData","colors","useScatterData","props","useApolloClient","useState","undefined","scatterData","setScatterData","useEffect","array","reduce","prev","curr","id","name","Name","size","options","value","label","UPDATE_PARALLEL","gql","Selector","useMutation","updateParallel","onChange","option","domain","target","variables","position","placeholder","SelectorPanel","Grid","container","xs","sm","md","lg","xl","alignItems","Typography","variant","useStyles","makeStyles","bar","width","zIndex","Slider","classes","_event","scatter","__typename","className","defaultValue","initial","valueLabelDisplay","SliderPanel","query","useHighlight","useQuery","details","Scatter","ref","useRef","height","containerSize","setContainerSize","highlight","tooltip","setTooltip","windowSize","useWindowSize","current","getBoundingClientRect","alignContent","title","onValueClick","node","event","strokeWidth","colorType","onValueMouseOver","onValueMouseOut","justify","usePokemon","pokemon","setPokemon","find","getDomains","targets","Details","domains","params","console","log","Object","entries","subset","filter","includes","imgSrc","src","slice","key","direction","margin","top","right","bottom","left","useParallelData","parallelData","setParallelData","setDomains","newDomains","useColor","selectorPanel","parallel","Parallel","Array","fill","_i","xType","axisStart","axisEnd","axisDomain","style","fontSize","Header","AppBar","backgroundColor","main","visBox","boxShadow","padding","Index","Mutation","_root","cache","getCacheKey","fragment","readFragment","sort","a","b","InMemoryCache","ApolloClient","typeDefs","resolvers","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bfb4ef17.chunk.js","sourcesContent":["import kmeans from 'ml-kmeans';\nimport { MarkSeriesPoint } from 'react-vis';\nimport { rgbToHex, hslToRgb } from '@material-ui/core';\nimport { ApolloClient } from 'apollo-boost';\n\nconst clustering = (\n  data: MarkSeriesPoint[],\n  client: ApolloClient<object>,\n  k: number\n) => {\n  if (!Number(data[0].x) || !Number(data[0].y)) return;\n  const array1 = data.map(item => item.x) as number[]; //from data find all variable1 values\n  const array2 = data.map(item => item.y) as number[]; //from data find all variable2 values\n\n  const centers = [];\n\n  for (let index = 0; index < k; index++) {\n    const x = Math.floor(\n      Math.random() * Math.max(...array1) + Math.min(...array1)\n    );\n    const y = Math.floor(\n      Math.random() * Math.max(...array2) + Math.min(...array2)\n    );\n    const center = [x, y];\n    centers.push(center);\n  }\n\n  const chosendata = [];\n  for (let index = 0; index < array1.length; index++) {\n    chosendata.push([array1[index], array2[index]]);\n  }\n\n  const ans = kmeans(chosendata, k, { initialization: centers }).clusters;\n\n  const getColor = (str: string | number) => {\n    const hue = (str.toString().charCodeAt(0) * 147) % 360;\n    return `hsl(${hue}, 75%, 60%)`;\n  };\n\n  const processedData = data.map((item, index) => ({\n    ...item,\n    color: rgbToHex(hslToRgb(getColor(ans[index]))),\n    opacity: 0.25\n  }));\n\n  client.writeData({\n    data: {\n      colors: processedData.map(item => item.color)\n    }\n  });\n\n  return processedData;\n};\n\nexport default clustering;\n","import React, { useState, useEffect } from 'react';\nimport { Pokemon } from '../../consts/Pokemon';\nimport data from '../../data/data.json';\nimport { MarkSeriesPoint } from 'react-vis';\nimport clustering from '../../utils/clustering';\nimport { useApolloClient } from '@apollo/react-hooks';\n\ntype Props = { x?: string; y?: string; k: number };\n\nconst useScatterData = (props: Props) => {\n  const client = useApolloClient();\n  const [scatterData, setScatterData] = useState<MarkSeriesPoint[] | undefined>(\n    undefined\n  );\n\n  useEffect(() => {\n    if (props.x !== null && props.y !== null) {\n      const array = data.reduce((prev, curr) => {\n        const x = curr[props.x! as keyof Pokemon];\n        const y = curr[props.y! as keyof Pokemon];\n        if (x === null || y === null) return prev;\n        return [\n          ...prev,\n          {\n            id: curr.Number,\n            name: curr.Name,\n            x: x === false || x === true ? x.toString() : x,\n            y: y === false || y === true ? y.toString() : y,\n            size: 1\n          }\n        ];\n      }, [] as MarkSeriesPoint[]);\n      setScatterData(clustering(array, client, props.k));\n    }\n    return undefined;\n  }, [client, props.k, props.x, props.y]);\n\n  return scatterData;\n};\n\nexport default useScatterData;\n","import React from 'react';\nimport Select from 'react-select';\nimport { useApolloClient, useMutation } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\n\nexport type Props = {\n  domain: string;\n  target: string;\n  value?: string;\n  position?: number;\n};\n\nconst options = [\n  'Number',\n  'Total',\n  'HP',\n  'Attack',\n  'Defense',\n  'Sp_Atk',\n  'Sp_Def',\n  'Speed',\n  'Generation',\n  'Pr_Male',\n  'Height_m',\n  'Weight_kg',\n  'Catch_Rate'\n].map(item => ({ value: item, label: item }));\n\nconst UPDATE_PARALLEL = gql`\n  mutation UpdateParallel($target: String!, $position: Integer) {\n    updateParallel(target: $target, position: $position) @client\n  }\n`;\n\nconst Selector: React.FC<Props> = (props: Props) => {\n  const client = useApolloClient();\n  const [updateParallel] = useMutation(UPDATE_PARALLEL);\n\n  const update = (option: any) => {\n    switch (props.domain) {\n      case 'scatter':\n        client.writeData({\n          data: {\n            [props.domain]: {\n              [props.target]: option.value,\n              __typename: props.domain\n            }\n          }\n        });\n        break;\n      case 'parallel':\n        updateParallel({\n          variables: { target: option.value, position: props.position }\n        });\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <>\n      <Select options={options} onChange={update} placeholder={props.value} />\n    </>\n  );\n};\n\nexport default Selector;\n","import React from 'react';\nimport { Typography, Grid } from '@material-ui/core';\nimport Selector from '../atoms/Selector';\nimport { Props as SelectorProps } from '../atoms/Selector';\n\ntype Props = SelectorProps;\n\nconst SelectorPanel: React.FC<Props> = (props: Props) => {\n  return (\n    <>\n      <Grid\n        container\n        item\n        xs={12}\n        sm={12}\n        md={12}\n        lg={12}\n        xl={12}\n        alignItems={'baseline'}\n      >\n        <Grid item xs={2} sm={2} md={2} lg={2} xl={2}>\n          <Typography variant={'body1'}>{props.target}</Typography>\n        </Grid>\n        <Grid item xs={10} sm={10} md={10} lg={10} xl={10}>\n          <Selector {...props} />\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default SelectorPanel;\n","import React from 'react';\nimport Select from 'react-select';\nimport { useApolloClient, useMutation } from '@apollo/react-hooks';\nimport { Slider as MuiSlider, makeStyles } from '@material-ui/core';\n\nexport type Props = { initial: number };\n\nconst useStyles = makeStyles({\n  bar: {\n    width: '100%',\n    position: 'relative',\n    zIndex: 0\n  }\n});\n\nconst Slider: React.FC<Props> = (props: Props) => {\n  const client = useApolloClient();\n  const handleChange = (_event: any, value: any) => {\n    client.writeData({\n      data: { scatter: { k: value, __typename: 'scatter' } }\n    });\n  };\n  const classes = useStyles();\n\n  return (\n    <>\n      <MuiSlider\n        onChange={handleChange}\n        className={classes.bar}\n        max={8}\n        min={1}\n        defaultValue={props.initial}\n        valueLabelDisplay={'on'}\n      />\n    </>\n  );\n};\n\nexport default Slider;\n","import React from 'react';\nimport { Typography, Grid } from '@material-ui/core';\nimport Slider from '../atoms/Slider';\nimport { Props as SliderProps } from '../atoms/Slider';\n\ntype Props = SliderProps;\n\nconst SliderPanel: React.FC<Props> = (props: Props) => {\n  return (\n    <>\n      <Grid\n        container\n        item\n        xs={12}\n        sm={12}\n        md={12}\n        lg={12}\n        xl={12}\n        alignItems={'center'}\n      >\n        <Grid item xs={2} sm={2} md={2} lg={2} xl={2}>\n          <Typography variant={'body1'}>k</Typography>\n        </Grid>\n        <Grid item xs={10} sm={10} md={10} lg={10} xl={10}>\n          <Slider {...props} />\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default SliderPanel;\n","import { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst query = gql`\n  {\n    details {\n      id\n    }\n  }\n`;\n\nconst useHighlight = () => {\n  const { data } = useQuery(query);\n\n  return data.details.id;\n};\n\nexport default useHighlight;\n","import React, { useEffect, useRef, useState } from 'react';\nimport {\n  XYPlot,\n  XAxis,\n  MarkSeries,\n  YAxis,\n  HorizontalGridLines,\n  VerticalGridLines,\n  MarkSeriesPoint,\n  Hint\n} from 'react-vis';\nimport useScatterData from '../uses/useScatterData';\nimport SelectorPanel from '../molecules/SelectorPanel';\nimport { Grid, Typography } from '@material-ui/core';\nimport { useApolloClient } from '@apollo/react-hooks';\nimport SliderPanel from '../molecules/SliderPanel';\nimport { useWindowSize } from 'react-use';\nimport useHighlight from '../uses/useHighlight';\n\nexport type Props = {\n  title: string;\n  x?: string;\n  y?: string;\n  k: number;\n};\n\ntype ToolTip = {\n  id: number;\n  x: number;\n  y: number;\n  name: string;\n};\n\nconst Scatter: React.FC<Props> = (props: Props) => {\n  const client = useApolloClient();\n\n  const ref = useRef<HTMLDivElement>(null);\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 });\n  const highlight = useHighlight();\n  const scatterData = useScatterData({\n    x: props.x,\n    y: props.y,\n    k: props.k\n  })?.map(item => ({\n    ...item,\n    color: item.id === highlight ? '#222222' : item.color,\n    opacity: item.id === highlight ? 1 : 0.25\n  }));\n\n  const [tooltip, setTooltip] = useState<ToolTip | undefined>(undefined);\n\n  const [temp, setTemp] = useState<any | undefined>(undefined);\n  const onValueClick = (node: any, event: any) => {\n    client.writeData({\n      data: {\n        details: {\n          title: 'details',\n          id: node.id,\n          __typename: 'details'\n        }\n      }\n    });\n  };\n\n  const windowSize = useWindowSize();\n\n  const onMouseOver = (node: any, event: any) => {\n    setTooltip({ x: node.x, y: node.y, id: node.id, name: node.name });\n  };\n  const onMouseOut = (node: any, event: any) => {\n    setTooltip(undefined);\n  };\n  useEffect(() => {\n    setContainerSize({\n      width: ref.current!.getBoundingClientRect().width,\n      height: ref.current!.getBoundingClientRect().height\n    });\n  }, [windowSize]);\n\n  return (\n    <Grid\n      container\n      item\n      ref={ref}\n      className={'component'}\n      alignContent={'center'}\n    >\n      <Grid container item xs={8} sm={8} md={8} lg={8} xl={8}>\n        {scatterData !== undefined ? (\n          <XYPlot\n            width={containerSize.width / 1.55}\n            height={containerSize.height * 0.78}\n          >\n            <HorizontalGridLines />\n            <VerticalGridLines />\n            <XAxis title={props.x} />\n            <YAxis title={props.y} />\n            <MarkSeries\n              data={scatterData}\n              onValueClick={onValueClick}\n              strokeWidth={0.01}\n              colorType=\"literal\"\n              onValueMouseOver={onMouseOver}\n              onValueMouseOut={onMouseOut}\n            />\n            {tooltip !== undefined ? <Hint value={tooltip} /> : null}\n          </XYPlot>\n        ) : (\n          <Typography>'Please select axes'</Typography>\n        )}\n      </Grid>\n\n      <Grid\n        container\n        item\n        xs={4}\n        sm={4}\n        md={4}\n        lg={4}\n        xl={4}\n        justify=\"flex-start\"\n        alignItems=\"center\"\n      >\n        <SelectorPanel domain={'scatter'} target={'x'} value={props.x} />\n        <SelectorPanel domain={'scatter'} target={'y'} value={props.y} />\n        <SliderPanel initial={2} />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Scatter;\n","import { useState, useEffect } from 'react';\nimport { Pokemon } from '../../consts/Pokemon';\nimport data from '../../data/data.json';\n\ntype Props = { id?: number };\n\nconst usePokemon = (props: Props) => {\n  const [pokemon, setPokemon] = useState<Pokemon | undefined>(undefined);\n\n  useEffect(() => {\n    if (props.id !== undefined) {\n      setPokemon(data.find(item => item.Number === props.id));\n    }\n  }, [props.id]);\n\n  return pokemon;\n};\n\nexport default usePokemon;\n","import { useState, useEffect } from 'react';\nimport { Pokemon } from '../../consts/Pokemon';\nimport data from '../../data/data.json';\n\nconst getDomains = (targets: string[]) => {\n  if (targets !== undefined) {\n    const domains: Record<string, any> = targets.reduce((prev, curr) => {\n      const array = data.map(item => item[curr as keyof Pokemon]) as number[];\n      return {\n        ...prev,\n        [curr]: [Math.min(...array), Math.max(...array)]\n      };\n    }, {});\n\n    return domains;\n  } else {\n    return undefined;\n  }\n};\n\nexport default getDomains;\n","import React, { useRef, useState, useEffect } from 'react';\nimport { Typography, Grid, Box } from '@material-ui/core';\nimport usePokemon from '../uses/useDetailsData';\nimport { useWindowSize } from 'react-use';\nimport useParallelData from '../uses/useParallelData';\nimport { RadarChart, RadarChartPoint } from 'react-vis';\nimport getDomains from '../uses/getDomains';\n\nexport type Props = { id: number };\n\nconst Details: React.FC<Props> = (props: Props) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 });\n  const windowSize = useWindowSize();\n  const pokemon = usePokemon({\n    id: props.id\n  });\n\n  const targets = ['HP', 'Attack', 'Defense', 'Sp_Atk', 'Sp_Def', 'Speed'];\n\n  const domains = getDomains(targets);\n  const params = targets.reduce(\n    (prev, curr) => ({\n      ...prev,\n      [curr]: pokemon ? pokemon[curr as keyof typeof pokemon] : undefined\n    }),\n    {}\n  );\n\n  console.log(\n    domains\n      ? Object.entries(domains).map(([key, value]) => ({\n          name: key,\n          domain: value\n        }))\n      : null\n  );\n\n  console.log(\n    Object.entries(domains!).map(([key, value]) => ({\n      name: key,\n      domain: value\n    }))\n  );\n\n  useEffect(() => {\n    if (pokemon !== undefined) {\n      setContainerSize({\n        width: ref.current!.getBoundingClientRect().width,\n        height: ref.current!.getBoundingClientRect().height\n      });\n    }\n  }, [pokemon, windowSize]);\n\n  const subset =\n    pokemon !== undefined\n      ? Object.entries(pokemon!).filter(item =>\n          [\n            'Number',\n            'Name',\n            'Type_1',\n            'Type_2',\n            'Generation',\n            'Height_m',\n            'Weight_kg'\n          ].includes(item[0])\n        )\n      : undefined;\n\n  const imgSrc = subset\n    ? 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/' +\n      subset.find(item => item[0] === 'Number')![1] +\n      '.png'\n    : undefined;\n\n  return (\n    <Grid\n      item\n      container\n      xs={12}\n      sm={12}\n      md={12}\n      lg={12}\n      xl={12}\n      ref={ref}\n      className={'component'}\n      alignContent={'space-around'}\n    >\n      {pokemon !== undefined ? (\n        <>\n          <Grid\n            item\n            container\n            xs={3}\n            sm={3}\n            md={3}\n            lg={3}\n            xl={3}\n            justify={'center'}\n            alignContent={'space-around'}\n          >\n            <img src={imgSrc} height={containerSize.height - 32}></img>\n          </Grid>\n          <Grid\n            item\n            container\n            xs={3}\n            sm={3}\n            md={3}\n            lg={3}\n            xl={3}\n            justify={'center'}\n            alignContent={'space-around'}\n          >\n            {subset?.slice(0, 2).map(([key, value]) => (\n              <Grid\n                item\n                container\n                xs={12}\n                sm={12}\n                md={12}\n                lg={12}\n                xl={12}\n                direction={'column'}\n              >\n                <Typography variant={'h6'}>{key}</Typography>\n                <Typography variant={'h3'}>{value?.toString()}</Typography>\n              </Grid>\n            ))}\n          </Grid>\n          <Grid\n            item\n            container\n            xs={2}\n            sm={2}\n            md={2}\n            lg={2}\n            xl={2}\n            justify={'center'}\n            alignContent={'space-around'}\n          >\n            {subset?.slice(2).map(([key, value]) => (\n              <>\n                <Grid\n                  item\n                  container\n                  xs={6}\n                  sm={6}\n                  md={6}\n                  lg={6}\n                  xl={6}\n                  alignContent={'center'}\n                >\n                  <Typography variant={'subtitle2'}>{key}</Typography>\n                </Grid>\n                <Grid\n                  item\n                  container\n                  xs={6}\n                  sm={6}\n                  md={6}\n                  lg={6}\n                  xl={6}\n                  alignContent={'center'}\n                >\n                  <Typography variant={'h6'}>{value?.toString()}</Typography>\n                </Grid>\n              </>\n            ))}\n          </Grid>\n          <Grid\n            item\n            container\n            xs={4}\n            sm={4}\n            md={4}\n            lg={4}\n            xl={4}\n            justify={'center'}\n            alignContent={'space-around'}\n          >\n            <RadarChart\n              margin={{ top: 40, right: 30, bottom: 30, left: 40 }}\n              data={[params] as RadarChartPoint[]}\n              height={containerSize.height - 32}\n              width={containerSize.height - 32}\n              domains={\n                Object.entries(domains!).map(([key, value]) => ({\n                  name: key,\n                  domain: value\n                })) as any\n              }\n            />\n          </Grid>\n        </>\n      ) : (\n        <Typography variant={'body1'}>\n          Click any mark to show the details of a pokemon.\n        </Typography>\n      )}\n    </Grid>\n  );\n};\n\nexport default Details;\n","import { useState, useEffect } from 'react';\nimport { Pokemon } from '../../consts/Pokemon';\nimport data from '../../data/data.json';\nimport { LineSeriesPoint } from 'react-vis';\nimport getDomains from './getDomains';\n\ntype Props = { targets: { position: number; name: string }[] };\n\nconst useParallelData = (props: Props) => {\n  const targets = props.targets.map(item => item.name);\n  const [parallelData, setParallelData] = useState<\n    LineSeriesPoint[][] | undefined\n  >(undefined);\n  const [domains, setDomains] = useState<Record<string, any> | undefined>(\n    undefined\n  );\n\n  useEffect(() => {\n    const newDomains = getDomains(targets);\n    if (props.targets !== undefined && newDomains !== undefined) {\n      console.log(newDomains);\n      setParallelData(\n        data.map(item => {\n          return targets.reduce((prev, curr) => {\n            return [\n              ...prev,\n              {\n                x: curr,\n                y:\n                  ((item[curr as keyof Pokemon] as number) -\n                    (newDomains as any)[curr][0]) /\n                  ((newDomains as any)[curr][1] - (newDomains as any)[curr][0])\n              }\n            ];\n          }, [] as LineSeriesPoint[]);\n        })\n      );\n      setDomains(newDomains);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.targets]);\n\n  return [parallelData, domains];\n};\n\nexport default useParallelData;\n","import { useState, useEffect } from 'react';\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst query = gql`\n  {\n    colors\n  }\n`;\n\nconst useColor = () => {\n  const { data } = useQuery(query);\n\n  return data.colors;\n};\n\nexport default useColor;\n","import React, { useRef, useState, useEffect } from 'react';\nimport { XYPlot, LineSeries, DecorativeAxis, LabelSeries } from 'react-vis';\nimport useParallelData from '../uses/useParallelData';\nimport SelectorPanel from '../molecules/SelectorPanel';\nimport { Grid, makeStyles } from '@material-ui/core';\nimport useColor from '../uses/useColor';\nimport useHighlight from '../uses/useHighlight';\nimport { useWindowSize } from 'react-use';\n\nexport type Props = { targets: { position: number; name: string }[] };\n\nconst useStyles = makeStyles({\n  selectorPanel: {\n    height: 'calc(25vh - 1rem - 8px)'\n  },\n  parallel: {\n    height: 'calc(75vh - 3rem - 24px)'\n  }\n});\n\nconst Parallel: React.FC<Props> = (props: Props) => {\n  const classes = useStyles();\n  const [parallelData, domains] = useParallelData({\n    targets: props.targets\n  });\n\n  console.log(parallelData, domains);\n\n  const ref = useRef<HTMLDivElement>(null);\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 });\n\n  const colors = useColor();\n  const windowSize = useWindowSize();\n  const highlight = useHighlight();\n\n  useEffect(() => {\n    setContainerSize({\n      width: ref.current!.getBoundingClientRect().width,\n      height: ref.current!.getBoundingClientRect().height\n    });\n  }, [windowSize]);\n\n  return (\n    <Grid\n      item\n      container\n      xs={12}\n      sm={12}\n      md={12}\n      lg={12}\n      xl={12}\n      className={'component'}\n      alignContent={'space-around'}\n    >\n      <Grid\n        item\n        container\n        xs={12}\n        sm={12}\n        md={12}\n        lg={12}\n        xl={12}\n        alignContent={'space-around'}\n        className={classes.selectorPanel}\n      >\n        {Array(6)\n          .fill(0)\n          .map((_i, index) => (\n            <Grid item container xs={6} sm={6} md={6} lg={6} xl={6}>\n              <SelectorPanel\n                domain={'parallel'}\n                target={`Axis ${index + 1}`}\n                value={props.targets[index]?.name}\n                position={index}\n              />\n            </Grid>\n          ))}\n      </Grid>\n      <Grid\n        item\n        container\n        xs={12}\n        sm={12}\n        md={12}\n        lg={12}\n        xl={12}\n        ref={ref}\n        className={classes.parallel}\n        justify={'center'}\n      >\n        <XYPlot\n          width={containerSize.width * 0.9}\n          height={containerSize.height}\n          xType=\"ordinal\"\n          margin={{ top: 15, left: 0, bottom: 15, right: 0 }}\n        >\n          {parallelData !== undefined\n            ? parallelData!.map(\n                (\n                  item:\n                    | (any[] | import('react-vis').LineSeriesPoint)[]\n                    | undefined,\n                  index: React.ReactText\n                ) => {\n                  return (\n                    <LineSeries\n                      data={item}\n                      color={highlight === index ? '#222222' : colors[index]}\n                      opacity={highlight === index ? 1 : 0.15}\n                    />\n                  );\n                }\n              )\n            : null}\n          {parallelData !== undefined\n            ? parallelData![0].map(\n                (item: { x: React.ReactText }, index: any) => {\n                  return [\n                    [\n                      <DecorativeAxis\n                        key={`${index}-axis`}\n                        axisStart={{ x: item.x, y: 0 }}\n                        axisEnd={{ x: item.x, y: 1 }}\n                        axisDomain={[domains![item.x][0], domains![item.x][1]]}\n                      />,\n                      <LabelSeries\n                        data={[\n                          {\n                            x: item.x,\n                            y: -0.04,\n                            label: item.x.toString(),\n                            style: { fontSize: 14 }\n                          }\n                        ]}\n                      />\n                    ]\n                  ];\n                }\n              )\n            : null}\n        </XYPlot>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Parallel;\n","import React from 'react';\nimport { AppBar, Grid, Typography } from '@material-ui/core';\nimport classes from '*.module.css';\n\ntype Props = {};\n\nconst Header: React.FC<Props> = (props: Props) => {\n  return (\n    <AppBar\n      position=\"sticky\"\n      style={{ backgroundColor: '#002855', height: '4rem' }}\n    >\n      <Grid container justify={'space-between'} alignItems={'center'}>\n        <Typography variant=\"h6\" style={{ margin: '1rem 3rem' }}>\n          ECS272-2020 Assignment 4\n        </Typography>\n        <Typography variant=\"h4\" style={{ margin: '0 3rem' }}>\n          Po-K-Means\n        </Typography>\n        <Typography variant=\"body1\" style={{ margin: '1rem 3rem' }}>\n          Keita Makino, Alice Dagmar Helena Lundvall\n        </Typography>\n      </Grid>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","/* eslint-disable @typescript-eslint/camelcase */\nimport React from 'react';\nimport { Grid, makeStyles } from '@material-ui/core';\nimport Scatter, { Props as ScatterProps } from '../organisms/Scatter';\nimport Details, { Props as DetailsProps } from '../organisms/Details';\nimport Parallel, { Props as ParallelProps } from '../organisms/Parallel';\nimport Header from '../organisms/Header';\n\ntype Props = {\n  scatter: ScatterProps;\n  details: DetailsProps;\n  parallel: ParallelProps;\n};\n\nconst useStyles = makeStyles({\n  main: {\n    height: 'calc(100vh - 4rem)',\n    backgroundColor: '#FBF6E5'\n  },\n  scatter: {\n    height: 'calc(68vh - 2.72rem)'\n  },\n  details: {\n    height: 'calc(32vh - 1.28rem)'\n  },\n  parallel: {\n    height: 'calc(100vh - 4rem)'\n  },\n  visBox: {\n    boxShadow: 'inset 0 0 8px -3px #002855',\n    '& .component': {\n      padding: '16px'\n    }\n  }\n});\n\nconst Index: React.FC<Props> = (props: Props) => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Grid item container xs={12} sm={12} md={12} lg={12} xl={12}>\n        <Header />\n      </Grid>\n      <Grid\n        item\n        container\n        xs={12}\n        sm={12}\n        md={12}\n        lg={12}\n        xl={12}\n        className={classes.main}\n      >\n        {/* grid for scatter */}\n        <Grid container item xs={12} sm={12} md={12} lg={8} xl={8}>\n          <Grid\n            container\n            item\n            xs={12}\n            sm={12}\n            md={12}\n            lg={12}\n            xl={12}\n            className={`${classes.scatter} ${classes.visBox}`}\n          >\n            <Scatter {...props.scatter} />\n          </Grid>\n          <Grid\n            container\n            item\n            xs={12}\n            sm={12}\n            md={12}\n            lg={12}\n            xl={12}\n            className={`${classes.details} ${classes.visBox}`}\n          >\n            <Details id={props.details.id} />\n          </Grid>\n        </Grid>\n\n        {/* grid for parallel & detail */}\n        <Grid\n          container\n          item\n          xs={12}\n          sm={12}\n          md={12}\n          lg={4}\n          xl={4}\n          className={`${classes.parallel} ${classes.visBox}`}\n        >\n          <Parallel targets={props.parallel.targets} />\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default Index;\n","import React from 'react';\nimport IndexTemplate from '../components/templates/Index';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\n\ntype Props = {};\n\nconst query = gql`\n  {\n    scatter {\n      title\n      x\n      y\n      k\n    }\n    parallel {\n      title\n      targets {\n        position\n        name\n      }\n    }\n    details {\n      title\n      id\n    }\n  }\n`;\nconst Index: React.FC<Props> = (props: Props) => {\n  const { data } = useQuery(query);\n  return (\n    <IndexTemplate\n      scatter={data.scatter}\n      details={data.details}\n      parallel={data.parallel}\n    />\n  );\n};\n\nexport default Index;\n","import { gql } from 'apollo-boost';\n\nexport default {\n  Mutation: {\n    updateParallel: (\n      _root: any,\n      variables: { position: any; target: any },\n      { cache, getCacheKey }: any\n    ) => {\n      const id = getCacheKey({\n        __typename: 'parallel',\n        id: 1\n      });\n      const fragment = gql`\n        fragment targets on Parallel {\n          title\n          targets {\n            position\n            name\n          }\n        }\n      `;\n      const parallel = cache.readFragment({ fragment, id });\n      const data = {\n        title: parallel.title,\n        targets: [\n          ...parallel.targets.filter(\n            (item: { position: any }) => item.position !== variables.position\n          ),\n          {\n            position: variables.position,\n            name: variables.target,\n            __typename: 'target'\n          }\n        ].sort((a, b) => (a.position < b.position ? -1 : 1))\n      };\n      console.log(parallel);\n      cache.writeData({ id, data });\n      return null;\n    }\n  }\n};\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Index from './pages/Index';\nimport { Grid } from '@material-ui/core';\n\nimport ApolloClient, { InMemoryCache, gql } from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport data from './data/initialState';\nimport resolvers from './resolvers';\n\nconst cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n  cache: cache,\n  typeDefs: '',\n  resolvers: resolvers\n});\n\ncache.writeData({\n  data\n});\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <ApolloProvider client={client}>\n        <Grid container xs={12} sm={12} md={12} lg={12} xl={12}>\n          <Index />\n        </Grid>\n      </ApolloProvider>\n    </div>\n  );\n};\n\nexport default App;\n","export default {\n  scatter: {\n    title: 'scatter',\n    x: 'Attack',\n    y: 'Defense',\n    k: 2,\n    __typename: 'scatter'\n  },\n  parallel: {\n    id: 1,\n    title: 'parallel',\n    targets: [\n      { position: 0, name: 'Attack', __typename: 'target' },\n      { position: 1, name: 'Defense', __typename: 'target' }\n    ],\n    __typename: 'parallel'\n  },\n  details: {\n    title: 'details',\n    id: null,\n    __typename: 'details'\n  },\n  colors: []\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}