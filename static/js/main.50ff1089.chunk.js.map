{"version":3,"sources":["utils/clustering.ts","components/uses/useScatterData.tsx","components/atoms/Selector.tsx","components/uses/usePokemonList.tsx","components/atoms/Search.tsx","components/molecules/SelectorPanel.tsx","components/atoms/Slider.tsx","components/molecules/SliderPanel.tsx","components/uses/useHighlight.tsx","components/organisms/Scatter.tsx","components/uses/usePokemon.tsx","components/uses/getDomains.tsx","components/organisms/Details.tsx","components/uses/useParallelData.tsx","components/uses/useColor.tsx","components/organisms/Parallel.tsx","components/organisms/Header.tsx","components/templates/Index.tsx","pages/Index.tsx","resolvers.ts","App.tsx","data/initialState.js","serviceWorker.ts","index.tsx"],"names":["clustering","data","client","k","Number","x","y","writeData","colors","map","item","color","array1","array2","centers","index","center","Math","floor","random","max","min","push","chosendata","length","ans","kmeans","initialization","clusters","getColor","str","hue","toString","charCodeAt","processedData","rgbToHex","hslToRgb","opacity","useScatterData","props","useApolloClient","useState","undefined","scatterData","setScatterData","useEffect","array","reduce","prev","curr","id","name","Name","size","options","value","label","UPDATE_PARALLEL","gql","Selector","useMutation","updateParallel","onChange","option","domain","target","variables","position","placeholder","usePokemonList","pokemonList","setPokemonList","Search","pokemons","details","title","__typename","console","log","cache","SelectorPanel","Grid","container","xs","sm","md","lg","xl","alignItems","Typography","variant","search","useStyles","makeStyles","bar","width","zIndex","Slider","classes","_event","scatter","className","defaultValue","initial","valueLabelDisplay","SliderPanel","query","useHighlight","useQuery","Scatter","ref","useRef","height","containerSize","setContainerSize","highlight","tickValues","Array","from","Set","tooltip","setTooltip","windowSize","useWindowSize","current","getBoundingClientRect","alignContent","xType","yType","margin","left","bottom","tickLabelAngle","onValueClick","node","event","strokeWidth","colorType","onValueMouseOver","onValueMouseOut","justify","align","usePokemon","pokemon","setPokemon","find","getDomains","targets","sort","a","b","Details","domains","params","subset","Object","entries","filter","includes","imgSrc","src","slice","key","direction","top","right","useParallelData","parallelData","setParallelData","setDomains","newDomains","minMax","indexOf","useColor","selectorPanel","parallel","Parallel","fill","_i","isNumeric","axisStart","axisEnd","axisDomain","tickValue","v","round","numberOfTicks","style","fontSize","Header","AppBar","backgroundColor","main","minHeight","visBox","boxShadow","padding","Index","Mutation","_root","getCacheKey","fragment","readFragment","InMemoryCache","ApolloClient","typeDefs","resolvers","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50ff1089.chunk.js","sourcesContent":["import kmeans from 'ml-kmeans';\nimport { MarkSeriesPoint } from 'react-vis';\nimport { rgbToHex, hslToRgb } from '@material-ui/core';\nimport { ApolloClient } from 'apollo-boost';\n\nconst clustering = (\n  data: MarkSeriesPoint[],\n  client: ApolloClient<object>,\n  k: number\n) => {\n  if (!Number(data[0].x) || !Number(data[0].y)) {\n    client.writeData({\n      data: {\n        colors: null\n      }\n    });\n    return data.map(item => ({ ...item, color: '#12939a' }));\n  }\n  const array1 = data.map(item => item.x) as number[]; //from data find all variable1 values\n  const array2 = data.map(item => item.y) as number[]; //from data find all variable2 values\n\n  const centers = [];\n\n  for (let index = 0; index < k; index++) {\n    const x = Math.floor(\n      Math.random() * Math.max(...array1) + Math.min(...array1)\n    );\n    const y = Math.floor(\n      Math.random() * Math.max(...array2) + Math.min(...array2)\n    );\n    const center = [x, y];\n    centers.push(center);\n  }\n\n  const chosendata = [];\n  for (let index = 0; index < array1.length; index++) {\n    chosendata.push([array1[index], array2[index]]);\n  }\n\n  const ans = kmeans(chosendata, k, { initialization: centers }).clusters;\n\n  const getColor = (str: string | number) => {\n    const hue = (str.toString().charCodeAt(0) * 157.5) % 360;\n    return `hsl(${hue}, 75%, 60%)`;\n  };\n\n  const processedData = data.map((item, index) => ({\n    ...item,\n    color: rgbToHex(hslToRgb(getColor(ans[index]))),\n    opacity: 0.25\n  }));\n\n  client.writeData({\n    data: {\n      colors: processedData.map(item => item.color)\n    }\n  });\n\n  return processedData;\n};\n\nexport default clustering;\n","import React, { useState, useEffect } from 'react';\nimport { Pokemon } from '../../consts/Pokemon';\nimport data from '../../data/data.json';\nimport { MarkSeriesPoint } from 'react-vis';\nimport clustering from '../../utils/clustering';\nimport { useApolloClient } from '@apollo/react-hooks';\n\ntype Props = { x?: string; y?: string; k: number };\n\nconst useScatterData = (props: Props) => {\n  const client = useApolloClient();\n  const [scatterData, setScatterData] = useState<MarkSeriesPoint[] | undefined>(\n    undefined\n  );\n\n  useEffect(() => {\n    if (props.x !== null && props.y !== null) {\n      const array = data.reduce((prev, curr) => {\n        const x = curr[props.x! as keyof Pokemon];\n        const y = curr[props.y! as keyof Pokemon];\n        if (x === null || y === null) return prev;\n        return [\n          ...prev,\n          {\n            id: curr.Number,\n            name: curr.Name,\n            x: x === false || x === true ? x.toString() : x,\n            y: y === false || y === true ? y.toString() : y,\n            size: 1\n          }\n        ];\n      }, [] as MarkSeriesPoint[]);\n      setScatterData(clustering(array, client, props.k));\n    }\n    return undefined;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.k, props.x, props.y]);\n\n  return scatterData;\n};\n\nexport default useScatterData;\n","import React from 'react';\nimport Select from 'react-select';\nimport { useApolloClient, useMutation } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\n\nexport type Props = {\n  domain: string;\n  target: string;\n  value?: string;\n  position?: number;\n};\n\nconst options = [\n  'Number',\n  'Name',\n  'Type_1',\n  'Type_2',\n  'Total',\n  'HP',\n  'Attack',\n  'Defense',\n  'Sp_Atk',\n  'Sp_Def',\n  'Speed',\n  'Generation',\n  'isLegendary',\n  'Color',\n  'hasGender',\n  'Pr_Male',\n  'Egg_Group_1',\n  'Egg_Group_2',\n  'hasMegaEvolution',\n  'Height_m',\n  'Weight_kg',\n  'Catch_Rate',\n  'Body_Style'\n].map(item => ({ value: item, label: item }));\n\nconst UPDATE_PARALLEL = gql`\n  mutation UpdateParallel($target: String!, $position: Integer) {\n    updateParallel(target: $target, position: $position) @client\n  }\n`;\n\nconst Selector: React.FC<Props> = (props: Props) => {\n  const client = useApolloClient();\n  const [updateParallel] = useMutation(UPDATE_PARALLEL);\n\n  const update = (option: any) => {\n    switch (props.domain) {\n      case 'scatter':\n        client.writeData({\n          data: {\n            [props.domain]: {\n              [props.target]: option.value,\n              __typename: props.domain\n            }\n          }\n        });\n        break;\n      case 'parallel':\n        updateParallel({\n          variables: { target: option.value, position: props.position }\n        });\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <>\n      <Select options={options} onChange={update} placeholder={props.value} />\n    </>\n  );\n};\n\nexport default Selector;\n","import { useState, useEffect } from 'react';\nimport { Pokemon } from '../../consts/Pokemon';\nimport data from '../../data/data.json';\n\nconst usePokemonList = () => {\n  const [pokemonList, setPokemonList] = useState<\n    { id: number; name: string }[] | undefined\n  >([]);\n\n  useEffect(() => {\n    setPokemonList(data.map(item => ({ id: item.Number, name: item.Name })));\n  }, []);\n\n  return pokemonList;\n};\n\nexport default usePokemonList;\n","import React from 'react';\nimport Select from 'react-select';\nimport { useApolloClient } from '@apollo/react-hooks';\nimport usePokemonList from '../uses/usePokemonList';\n\nexport type Props = {\n  domain: string;\n  target: string;\n  value?: string;\n  position?: number;\n};\n\nconst Search: React.FC<Props> = (props: Props) => {\n  const client = useApolloClient();\n  const pokemons = usePokemonList();\n\n  const update = (option: any) => {\n    client.writeData({\n      data: {\n        details: {\n          title: 'details',\n          id: option.value,\n          __typename: 'details'\n        }\n      }\n    });\n    console.log(client.cache);\n  };\n\n  return (\n    <>\n      <Select\n        options={pokemons?.map(item => ({ value: item.id, label: item.name }))}\n        onChange={update}\n        placeholder={props.value}\n      />\n    </>\n  );\n};\n\nexport default Search;\n","import React from 'react';\nimport { Typography, Grid } from '@material-ui/core';\nimport Selector from '../atoms/Selector';\nimport { Props as SelectorProps } from '../atoms/Selector';\nimport Search from '../atoms/Search';\n\ntype Props = SelectorProps & {\n  search?: boolean;\n};\n\nconst SelectorPanel: React.FC<Props> = (props: Props) => {\n  return (\n    <>\n      <Grid\n        container\n        item\n        xs={12}\n        sm={12}\n        md={12}\n        lg={12}\n        xl={12}\n        alignItems={'baseline'}\n      >\n        <Grid item xs={2} sm={2} md={2} lg={2} xl={2}>\n          <Typography variant={'body1'}>{props.target}</Typography>\n        </Grid>\n        <Grid item xs={10} sm={10} md={10} lg={10} xl={10}>\n          {props.search ? <Search {...props} /> : <Selector {...props} />}\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default SelectorPanel;\n","import React from 'react';\nimport Select from 'react-select';\nimport { useApolloClient, useMutation } from '@apollo/react-hooks';\nimport { Slider as MuiSlider, makeStyles } from '@material-ui/core';\n\nexport type Props = { initial: number };\n\nconst useStyles = makeStyles({\n  bar: {\n    width: '100%',\n    position: 'relative',\n    zIndex: 0\n  }\n});\n\nconst Slider: React.FC<Props> = (props: Props) => {\n  const client = useApolloClient();\n  const handleChange = (_event: any, value: any) => {\n    client.writeData({\n      data: { scatter: { k: value, __typename: 'scatter' } }\n    });\n  };\n  const classes = useStyles();\n\n  return (\n    <>\n      <MuiSlider\n        onChange={handleChange}\n        className={classes.bar}\n        max={8}\n        min={1}\n        defaultValue={props.initial}\n        valueLabelDisplay={'on'}\n      />\n    </>\n  );\n};\n\nexport default Slider;\n","import React from 'react';\nimport { Typography, Grid } from '@material-ui/core';\nimport Slider from '../atoms/Slider';\nimport { Props as SliderProps } from '../atoms/Slider';\n\ntype Props = SliderProps;\n\nconst SliderPanel: React.FC<Props> = (props: Props) => {\n  return (\n    <>\n      <Grid\n        container\n        item\n        xs={12}\n        sm={12}\n        md={12}\n        lg={12}\n        xl={12}\n        alignItems={'center'}\n      >\n        <Grid item xs={2} sm={2} md={2} lg={2} xl={2}>\n          <Typography variant={'body1'}>k</Typography>\n        </Grid>\n        <Grid item xs={10} sm={10} md={10} lg={10} xl={10}>\n          <Slider {...props} />\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default SliderPanel;\n","import { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst query = gql`\n  {\n    details {\n      id\n    }\n  }\n`;\n\nconst useHighlight = () => {\n  const { data } = useQuery(query);\n\n  return data.details.id;\n};\n\nexport default useHighlight;\n","import React, { useEffect, useRef, useState } from 'react';\nimport {\n  XYPlot,\n  XAxis,\n  MarkSeries,\n  YAxis,\n  HorizontalGridLines,\n  VerticalGridLines,\n  MarkSeriesPoint,\n  Hint\n} from 'react-vis';\nimport useScatterData from '../uses/useScatterData';\nimport SelectorPanel from '../molecules/SelectorPanel';\nimport { Grid, Typography } from '@material-ui/core';\nimport { useApolloClient } from '@apollo/react-hooks';\nimport SliderPanel from '../molecules/SliderPanel';\nimport { useWindowSize } from 'react-use';\nimport useHighlight from '../uses/useHighlight';\n\nexport type Props = {\n  title: string;\n  x?: string;\n  y?: string;\n  k: number;\n};\n\ntype ToolTip = {\n  id: number;\n  x: number;\n  y: number;\n  name: string;\n};\n\nconst Scatter: React.FC<Props> = (props: Props) => {\n  const client = useApolloClient();\n\n  const ref = useRef<HTMLDivElement>(null);\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 });\n  const highlight = useHighlight();\n  const scatterData = useScatterData({\n    x: props.x,\n    y: props.y,\n    k: props.k\n  })?.map(item => ({\n    ...item,\n    color: item.id === highlight ? '#222222' : item.color,\n    opacity: item.id === highlight ? 1 : 0.25\n  }));\n\n  const tickValues =\n    scatterData !== undefined\n      ? {\n          x:\n            typeof scatterData[0].x !== 'number'\n              ? [...Array.from(new Set(scatterData.map(item => item.x)))]\n              : undefined,\n          y:\n            typeof scatterData[0].y !== 'number'\n              ? [...Array.from(new Set(scatterData.map(item => item.y)))]\n              : undefined\n        }\n      : { x: undefined, y: undefined };\n\n  const [tooltip, setTooltip] = useState<ToolTip | undefined>(undefined);\n\n  const onValueClick = (node: any, event: any) => {\n    client.writeData({\n      data: {\n        details: {\n          title: 'details',\n          id: node.id,\n          __typename: 'details'\n        }\n      }\n    });\n  };\n\n  const windowSize = useWindowSize();\n\n  const onMouseOver = (node: any, event: any) => {\n    setTooltip({ x: node.x, y: node.y, id: node.id, name: node.name });\n  };\n  const onMouseOut = (node: any, event: any) => {\n    setTooltip(undefined);\n  };\n  useEffect(() => {\n    setContainerSize({\n      width: ref.current!.getBoundingClientRect().width,\n      height: ref.current!.getBoundingClientRect().height\n    });\n  }, [windowSize]);\n\n  return (\n    <Grid\n      container\n      item\n      ref={ref}\n      className={'component'}\n      alignContent={'center'}\n    >\n      <Grid container item xs={8} sm={8} md={8} lg={8} xl={8}>\n        {scatterData !== undefined ? (\n          <XYPlot\n            width={containerSize.width / 1.55}\n            height={containerSize.height * 0.78}\n            xType={tickValues.x !== undefined ? 'ordinal' : undefined}\n            yType={tickValues.y !== undefined ? 'ordinal' : undefined}\n            margin={{\n              left: tickValues.y !== undefined ? 85 : 40,\n              bottom: tickValues.x !== undefined ? 80 : 40\n            }}\n          >\n            <HorizontalGridLines />\n            <VerticalGridLines />\n            <XAxis\n              title={props.x}\n              tickValues={tickValues.x}\n              tickLabelAngle={tickValues.x !== undefined ? -45 : undefined}\n            />\n            <YAxis title={props.y} tickValues={tickValues.y} />\n            <MarkSeries\n              data={scatterData}\n              onValueClick={onValueClick}\n              strokeWidth={0.01}\n              colorType=\"literal\"\n              onValueMouseOver={onMouseOver}\n              onValueMouseOut={onMouseOut}\n            />\n            {tooltip !== undefined ? <Hint value={tooltip} /> : null}\n          </XYPlot>\n        ) : (\n          <Typography>'Please select axes'</Typography>\n        )}\n      </Grid>\n\n      <Grid\n        container\n        item\n        xs={4}\n        sm={4}\n        md={4}\n        lg={4}\n        xl={4}\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <SelectorPanel domain={'scatter'} target={'Search'} search />\n        <SelectorPanel domain={'scatter'} target={'x'} value={props.x} />\n        <SelectorPanel domain={'scatter'} target={'y'} value={props.y} />\n        <SliderPanel initial={2} />\n        {tickValues.x !== undefined || tickValues.y !== undefined ? (\n          <Grid item container xs={10} sm={10} md={10} lg={10} xl={10}>\n            <Typography variant={'body1'} color={'error'} align={'left'}>\n              Clustering is not enabled as one or more variables are discrete.\n            </Typography>\n          </Grid>\n        ) : null}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Scatter;\n","import { useState, useEffect } from 'react';\nimport { Pokemon } from '../../consts/Pokemon';\nimport data from '../../data/data.json';\n\ntype Props = { id?: number };\n\nconst usePokemon = (props: Props) => {\n  const [pokemon, setPokemon] = useState<Pokemon | undefined>(undefined);\n\n  useEffect(() => {\n    if (props.id !== undefined) {\n      setPokemon(data.find(item => item.Number === props.id));\n    }\n  }, [props.id]);\n\n  return pokemon;\n};\n\nexport default usePokemon;\n","import { Pokemon } from '../../consts/Pokemon';\nimport data from '../../data/data.json';\n\nconst getDomains = (targets: string[]) => {\n  if (targets !== undefined) {\n    const domains: Record<string, any> = targets.reduce((prev, curr) => {\n      const t = data[0];\n      if (typeof t[curr as keyof Pokemon] === typeof 0) {\n        const array = data.map(item => item[curr as keyof Pokemon]) as number[];\n        return {\n          ...prev,\n          [curr]: [Math.min(...array), Math.max(...array)]\n        };\n      } else {\n        const array = data.map(item =>\n          item[curr as keyof Pokemon] !== null\n            ? item[curr as keyof Pokemon]!.toString()\n            : ''\n        );\n        return {\n          ...prev,\n          [curr]: [\n            ...Array.from(new Set(array)).sort((a, b) => (a < b ? -1 : 1))\n          ]\n        };\n      }\n    }, {});\n\n    return domains;\n  } else {\n    return undefined;\n  }\n};\n\nexport default getDomains;\n","import React, { useRef, useState, useEffect } from 'react';\nimport { Typography, Grid, Box } from '@material-ui/core';\nimport usePokemon from '../uses/usePokemon';\nimport { useWindowSize } from 'react-use';\nimport useParallelData from '../uses/useParallelData';\nimport { RadarChart, RadarChartPoint } from 'react-vis';\nimport getDomains from '../uses/getDomains';\n\nexport type Props = { id: number };\n\nconst Details: React.FC<Props> = (props: Props) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 });\n  const windowSize = useWindowSize();\n  const pokemon = usePokemon({\n    id: props.id\n  });\n\n  const targets = ['HP', 'Attack', 'Defense', 'Sp_Atk', 'Sp_Def', 'Speed'];\n\n  const domains = getDomains(targets);\n  const params = targets.reduce(\n    (prev, curr) => ({\n      ...prev,\n      [curr]: pokemon ? pokemon[curr as keyof typeof pokemon] : undefined\n    }),\n    {}\n  );\n\n  useEffect(() => {\n    if (pokemon !== undefined) {\n      setContainerSize({\n        width: ref.current!.getBoundingClientRect().width,\n        height: ref.current!.getBoundingClientRect().height\n      });\n    }\n  }, [pokemon, windowSize]);\n\n  const subset =\n    pokemon !== undefined\n      ? Object.entries(pokemon!).filter(item =>\n          [\n            'Number',\n            'Name',\n            'Type_1',\n            'Type_2',\n            'Generation',\n            'Height_m',\n            'Weight_kg'\n          ].includes(item[0])\n        )\n      : undefined;\n\n  const imgSrc = subset\n    ? 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/' +\n      subset.find(item => item[0] === 'Number')![1] +\n      '.png'\n    : undefined;\n\n  return (\n    <Grid\n      item\n      container\n      xs={12}\n      sm={12}\n      md={12}\n      lg={12}\n      xl={12}\n      ref={ref}\n      className={'component'}\n      alignContent={'space-around'}\n    >\n      {pokemon !== undefined ? (\n        <>\n          <Grid\n            item\n            container\n            xs={3}\n            sm={3}\n            md={3}\n            lg={3}\n            xl={3}\n            justify={'center'}\n            alignContent={'space-around'}\n          >\n            <img src={imgSrc} height={containerSize.height - 32}></img>\n          </Grid>\n          <Grid\n            item\n            container\n            xs={3}\n            sm={3}\n            md={3}\n            lg={3}\n            xl={3}\n            justify={'center'}\n            alignContent={'space-around'}\n          >\n            {subset?.slice(0, 2).map(([key, value]) => (\n              <Grid\n                item\n                container\n                xs={12}\n                sm={12}\n                md={12}\n                lg={12}\n                xl={12}\n                direction={'column'}\n              >\n                <Typography variant={'h6'}>{key}</Typography>\n                <Typography variant={'h3'}>{value?.toString()}</Typography>\n              </Grid>\n            ))}\n          </Grid>\n          <Grid\n            item\n            container\n            xs={2}\n            sm={2}\n            md={2}\n            lg={2}\n            xl={2}\n            justify={'center'}\n            alignContent={'space-around'}\n          >\n            {subset?.slice(2).map(([key, value]) => (\n              <>\n                <Grid\n                  item\n                  container\n                  xs={6}\n                  sm={6}\n                  md={6}\n                  lg={6}\n                  xl={6}\n                  alignContent={'center'}\n                >\n                  <Typography variant={'subtitle2'}>{key}</Typography>\n                </Grid>\n                <Grid\n                  item\n                  container\n                  xs={6}\n                  sm={6}\n                  md={6}\n                  lg={6}\n                  xl={6}\n                  alignContent={'center'}\n                >\n                  <Typography variant={'h6'}>{value?.toString()}</Typography>\n                </Grid>\n              </>\n            ))}\n          </Grid>\n          <Grid\n            item\n            container\n            xs={4}\n            sm={4}\n            md={4}\n            lg={4}\n            xl={4}\n            justify={'center'}\n            alignContent={'space-around'}\n          >\n            <RadarChart\n              margin={{ top: 40, right: 30, bottom: 30, left: 40 }}\n              data={[params] as RadarChartPoint[]}\n              height={containerSize.height - 32}\n              width={containerSize.height - 32}\n              domains={\n                Object.entries(domains!).map(([key, value]) => ({\n                  name: key,\n                  domain: value\n                })) as any\n              }\n            />\n          </Grid>\n        </>\n      ) : (\n        <Typography variant={'body1'}>\n          Click any mark to show the details of the pokemon.\n        </Typography>\n      )}\n    </Grid>\n  );\n};\n\nexport default Details;\n","import { useState, useEffect } from 'react';\nimport { Pokemon } from '../../consts/Pokemon';\nimport data from '../../data/data.json';\nimport { LineSeriesPoint } from 'react-vis';\nimport getDomains from './getDomains';\n\ntype Props = { targets: { position: number; name: string }[] };\n\nconst useParallelData = (props: Props) => {\n  const targets = props.targets.map(item => item.name);\n  const [parallelData, setParallelData] = useState<\n    LineSeriesPoint[][] | undefined\n  >(undefined);\n  const [domains, setDomains] = useState<Record<string, any> | undefined>(\n    undefined\n  );\n\n  useEffect(() => {\n    const newDomains = getDomains(targets);\n    if (props.targets !== undefined && newDomains !== undefined) {\n      setParallelData(\n        data.map(item => {\n          return targets.reduce((prev, curr) => {\n            const minMax = newDomains[curr];\n            const key = curr as keyof Pokemon;\n            return [\n              ...prev,\n              {\n                x: curr,\n                y:\n                  typeof minMax[0] === typeof 1\n                    ? ((item[key] as number) - minMax[0]) /\n                      (minMax[1] - minMax[0])\n                    : item[key] !== null\n                    ? minMax.indexOf(item[key]!.toString()) /\n                      (minMax.length - 1)\n                    : minMax.indexOf('')\n              }\n            ];\n          }, [] as LineSeriesPoint[]);\n        })\n      );\n      setDomains(newDomains);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.targets]);\n\n  return [parallelData, domains];\n};\n\nexport default useParallelData;\n","import { useState, useEffect } from 'react';\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst query = gql`\n  {\n    colors\n  }\n`;\n\nconst useColor = () => {\n  const { data } = useQuery(query);\n\n  return data.colors;\n};\n\nexport default useColor;\n","import React, { useRef, useState, useEffect } from 'react';\nimport {\n  XYPlot,\n  LineSeries,\n  DecorativeAxis,\n  LabelSeries,\n  LineSeriesPoint\n} from 'react-vis';\nimport useParallelData from '../uses/useParallelData';\nimport SelectorPanel from '../molecules/SelectorPanel';\nimport { Grid, makeStyles, Typography } from '@material-ui/core';\nimport useColor from '../uses/useColor';\nimport useHighlight from '../uses/useHighlight';\nimport { useWindowSize } from 'react-use';\n\nexport type Props = {\n  targets: { position: number; name: string }[];\n};\n\nconst useStyles = makeStyles({\n  selectorPanel: {\n    height: 'calc(30vh - 1.2rem - 9.6px)'\n  },\n  parallel: {\n    height: 'calc(70vh - 2.8rem - 22.4px)'\n  }\n});\n\nconst Parallel: React.FC<Props> = (props: Props) => {\n  const classes = useStyles();\n  const [parallelData, domains] = useParallelData({\n    targets: props.targets\n  });\n\n  const ref = useRef<HTMLDivElement>(null);\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 });\n\n  const colors = useColor();\n  const windowSize = useWindowSize();\n  const highlight = useHighlight();\n\n  useEffect(() => {\n    setContainerSize({\n      width: ref.current!.getBoundingClientRect().width,\n      height: ref.current!.getBoundingClientRect().height\n    });\n  }, [windowSize]);\n\n  return (\n    <Grid\n      item\n      container\n      xs={12}\n      sm={12}\n      md={12}\n      lg={12}\n      xl={12}\n      className={'component'}\n      alignContent={'space-around'}\n    >\n      <Grid\n        item\n        container\n        xs={12}\n        sm={12}\n        md={12}\n        lg={12}\n        xl={12}\n        alignContent={'space-around'}\n        justify={'center'}\n        className={classes.selectorPanel}\n      >\n        {Array(6)\n          .fill(0)\n          .map((_i, index) => (\n            <Grid item container xs={6} sm={6} md={6} lg={6} xl={6}>\n              <SelectorPanel\n                domain={'parallel'}\n                target={`Axis ${index + 1}`}\n                value={props.targets[index]?.name}\n                position={index}\n              />\n            </Grid>\n          ))}\n        {colors === null ? (\n          <Grid item container xs={10} sm={10} md={10} lg={10} xl={10}>\n            <Typography variant={'body1'} color={'error'} align={'left'}>\n              Clustering is not enabled as one or more variables in the scatter\n              plot are discrete.\n            </Typography>\n          </Grid>\n        ) : null}\n      </Grid>\n      <Grid\n        item\n        container\n        xs={12}\n        sm={12}\n        md={12}\n        lg={12}\n        xl={12}\n        ref={ref}\n        className={classes.parallel}\n        justify={'center'}\n      >\n        <XYPlot\n          width={containerSize.width * 0.9}\n          height={containerSize.height}\n          xType=\"ordinal\"\n          margin={{ top: 15, left: 0, bottom: 15, right: 0 }}\n        >\n          {parallelData !== undefined\n            ? parallelData!.map((item: LineSeriesPoint[], index: number) => {\n                return (\n                  <LineSeries\n                    data={item}\n                    color={\n                      highlight === index + 1\n                        ? '#222222'\n                        : colors\n                        ? colors[index]\n                        : '#12939a'\n                    }\n                    opacity={highlight === index + 1 ? 1 : 0.125}\n                  />\n                );\n              })\n            : null}\n          {parallelData !== undefined\n            ? parallelData![0].map(\n                (item: { x: React.ReactText }, index: any) => {\n                  const isNumeric = Number(domains![item.x][0]);\n                  return [\n                    [\n                      <DecorativeAxis\n                        axisStart={{ x: item.x, y: 0 }}\n                        axisEnd={{ x: item.x, y: 1 }}\n                        axisDomain={isNumeric ? domains![item.x] : [0, 1]}\n                        tickValue={\n                          isNumeric\n                            ? undefined\n                            : (v: any) =>\n                                domains![item.x][\n                                  Math.round(v * (domains![item.x].length - 1))\n                                ]\n                        }\n                        numberOfTicks={\n                          isNumeric ? undefined : domains![item.x].length - 1\n                        }\n                      />,\n                      <LabelSeries\n                        data={[\n                          {\n                            x: item.x,\n                            y: -0.04,\n                            label: item.x.toString(),\n                            style: { fontSize: 14 }\n                          }\n                        ]}\n                      />\n                    ]\n                  ];\n                }\n              )\n            : null}\n        </XYPlot>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Parallel;\n","import React from 'react';\nimport { AppBar, Grid, Typography } from '@material-ui/core';\nimport classes from '*.module.css';\n\ntype Props = {};\n\nconst Header: React.FC<Props> = (props: Props) => {\n  return (\n    <AppBar\n      position=\"sticky\"\n      style={{ backgroundColor: '#002855', height: '4rem' }}\n    >\n      <Grid container justify={'space-between'} alignItems={'center'}>\n        <Typography variant=\"h6\" style={{ margin: '1rem 3rem' }}>\n          ECS272-2020 Assignment 4\n        </Typography>\n        <Typography variant=\"h4\" style={{ margin: '0 3rem' }}>\n          Po-K-Means\n        </Typography>\n        <Typography variant=\"body1\" style={{ margin: '1rem 3rem' }}>\n          Keita Makino, Alice Dagmar Helena Lundvall\n        </Typography>\n      </Grid>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","/* eslint-disable @typescript-eslint/camelcase */\nimport React from 'react';\nimport { Grid, makeStyles } from '@material-ui/core';\nimport Scatter, { Props as ScatterProps } from '../organisms/Scatter';\nimport Details, { Props as DetailsProps } from '../organisms/Details';\nimport Parallel, { Props as ParallelProps } from '../organisms/Parallel';\nimport Header from '../organisms/Header';\n\ntype Props = {\n  scatter: ScatterProps;\n  details: DetailsProps;\n  parallel: ParallelProps;\n};\n\nconst useStyles = makeStyles({\n  main: {\n    minHeight: 'calc(100vh - 4rem)',\n    backgroundColor: '#FBF6E5'\n  },\n  scatter: {\n    height: 'calc(68vh - 2.72rem)'\n  },\n  details: {\n    height: 'calc(32vh - 1.28rem)'\n  },\n  parallel: {\n    height: 'calc(100vh - 4rem)'\n  },\n  visBox: {\n    boxShadow: 'inset 0 0 8px -3px #002855',\n    '& .component': {\n      padding: '16px'\n    }\n  }\n});\n\nconst Index: React.FC<Props> = (props: Props) => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Grid item container xs={12} sm={12} md={12} lg={12} xl={12}>\n        <Header />\n      </Grid>\n      <Grid\n        item\n        container\n        xs={12}\n        sm={12}\n        md={12}\n        lg={12}\n        xl={12}\n        className={classes.main}\n      >\n        {/* grid for scatter */}\n        <Grid container item xs={12} sm={12} md={12} lg={8} xl={8}>\n          <Grid\n            container\n            item\n            xs={12}\n            sm={12}\n            md={12}\n            lg={12}\n            xl={12}\n            className={`${classes.scatter} ${classes.visBox}`}\n          >\n            <Scatter {...props.scatter} />\n          </Grid>\n          <Grid\n            container\n            item\n            xs={12}\n            sm={12}\n            md={12}\n            lg={12}\n            xl={12}\n            className={`${classes.details} ${classes.visBox}`}\n          >\n            <Details id={props.details.id} />\n          </Grid>\n        </Grid>\n\n        {/* grid for parallel & detail */}\n        <Grid\n          container\n          item\n          xs={12}\n          sm={12}\n          md={12}\n          lg={4}\n          xl={4}\n          className={`${classes.parallel} ${classes.visBox}`}\n        >\n          <Parallel {...props.parallel} />\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default Index;\n","import React from 'react';\nimport IndexTemplate from '../components/templates/Index';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\n\ntype Props = {};\n\nconst query = gql`\n  {\n    scatter {\n      title\n      x\n      y\n      k\n    }\n    parallel {\n      title\n      targets {\n        position\n        name\n      }\n    }\n    details @client {\n      title\n      id\n    }\n  }\n`;\nconst Index: React.FC<Props> = (props: Props) => {\n  const { data } = useQuery(query);\n  return (\n    <IndexTemplate\n      scatter={data.scatter}\n      details={data.details}\n      parallel={data.parallel}\n    />\n  );\n};\n\nexport default Index;\n","import { gql } from 'apollo-boost';\n\nexport default {\n  Mutation: {\n    updateParallel: (\n      _root: any,\n      variables: { position: any; target: any },\n      { cache, getCacheKey }: any\n    ) => {\n      const id = getCacheKey({\n        __typename: 'parallel',\n        id: 1\n      });\n      const fragment = gql`\n        fragment targets on Parallel {\n          title\n          targets {\n            position\n            name\n          }\n        }\n      `;\n      const parallel = cache.readFragment({ fragment, id });\n      const data = {\n        title: parallel.title,\n        targets: [\n          ...parallel.targets.filter(\n            (item: { position: any }) => item.position !== variables.position\n          ),\n          {\n            position: variables.position,\n            name: variables.target,\n            __typename: 'target'\n          }\n        ].sort((a, b) => (a.position < b.position ? -1 : 1))\n      };\n\n      cache.writeData({ id, data });\n      return null;\n    }\n  }\n};\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Index from './pages/Index';\nimport { Grid } from '@material-ui/core';\n\nimport ApolloClient, { InMemoryCache, gql } from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport data from './data/initialState';\nimport resolvers from './resolvers';\n\nconst cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n  cache: cache,\n  typeDefs: '',\n  resolvers: resolvers\n});\n\ncache.writeData({\n  data\n});\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <ApolloProvider client={client}>\n        <Grid container xs={12} sm={12} md={12} lg={12} xl={12}>\n          <Index />\n        </Grid>\n      </ApolloProvider>\n    </div>\n  );\n};\n\nexport default App;\n","export default {\n  scatter: {\n    title: 'scatter',\n    x: 'Attack',\n    y: 'Defense',\n    k: 2,\n    __typename: 'scatter'\n  },\n  parallel: {\n    id: 1,\n    title: 'parallel',\n    targets: [\n      { position: 0, name: 'Attack', __typename: 'target' },\n      { position: 1, name: 'Defense', __typename: 'target' }\n    ],\n    __typename: 'parallel'\n  },\n  details: {\n    title: 'details',\n    id: null,\n    __typename: 'details'\n  },\n  colors: []\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}