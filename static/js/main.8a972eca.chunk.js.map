{"version":3,"sources":["utils/clustering.ts","components/uses/useScatterData.tsx","components/atoms/Selector.tsx","components/molecules/SelectorPanel.tsx","components/atoms/Slider.tsx","components/molecules/SliderPanel.tsx","components/organisms/Scatter.tsx","components/uses/useDetailsData.tsx","components/organisms/Details.tsx","components/uses/useParallelData.tsx","components/uses/useColor.tsx","components/uses/useHighlight.tsx","components/organisms/Parallel.tsx","components/organisms/Header.tsx","components/templates/Index.tsx","pages/Index.tsx","resolvers.ts","App.tsx","data/initialState.js","serviceWorker.ts","index.tsx"],"names":["clustering","data","client","k","Number","x","y","array1","map","item","array2","centers","index","center","Math","floor","random","max","min","push","chosendata","length","ans","kmeans","initialization","clusters","getColor","str","hue","toString","charCodeAt","processedData","color","rgbToHex","hslToRgb","opacity","writeData","colors","useScatterData","props","useApolloClient","useState","undefined","scatterData","setScatterData","useEffect","array","reduce","prev","curr","id","name","Name","size","options","value","label","UPDATE_PARALLEL","gql","Selector","useMutation","updateParallel","onChange","option","domain","target","variables","position","placeholder","SelectorPanel","Grid","container","xs","sm","md","lg","xl","alignItems","Typography","variant","useStyles","makeStyles","bar","width","zIndex","Slider","classes","_event","scatter","__typename","className","defaultValue","initial","valueLabelDisplay","SliderPanel","Scatter","ref","useRef","height","containerSize","setContainerSize","tooltip","setTooltip","temp","setTemp","window","useWindowSize","current","getBoundingClientRect","alignContent","title","onValueClick","node","event","details","strokeWidth","colorType","onValueMouseOver","onValueMouseOut","justify","useDetailsData","detailsData","setDetailsData","find","Details","subset","imgSrc","Object","entries","filter","console","log","style","src","slice","key","direction","useParallelData","targets","parallelData","setParallelData","domains","setDomains","query","useColor","useQuery","useHighlight","selectorPanel","parallel","Parallel","windowSize","highlight","Array","fill","_i","xType","margin","top","left","bottom","right","axisStart","axisEnd","axisDomain","fontSize","Header","AppBar","backgroundColor","main","visBox","boxShadow","padding","Index","Mutation","_root","cache","getCacheKey","fragment","readFragment","sort","a","b","InMemoryCache","ApolloClient","typeDefs","resolvers","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8a972eca.chunk.js","sourcesContent":["import kmeans from 'ml-kmeans';\nimport { MarkSeriesPoint } from 'react-vis';\nimport { rgbToHex, hslToRgb } from '@material-ui/core';\nimport { ApolloClient } from 'apollo-boost';\n\nconst clustering = (\n  data: MarkSeriesPoint[],\n  client: ApolloClient<object>,\n  k: number\n) => {\n  if (!Number(data[0].x) || !Number(data[0].y)) return;\n  const array1 = data.map(item => item.x) as number[]; //from data find all variable1 values\n  const array2 = data.map(item => item.y) as number[]; //from data find all variable2 values\n\n  const centers = [];\n\n  for (let index = 0; index < k; index++) {\n    const x = Math.floor(\n      Math.random() * Math.max(...array1) + Math.min(...array1)\n    );\n    const y = Math.floor(\n      Math.random() * Math.max(...array2) + Math.min(...array2)\n    );\n    const center = [x, y];\n    centers.push(center);\n  }\n\n  const chosendata = [];\n  for (let index = 0; index < array1.length; index++) {\n    chosendata.push([array1[index], array2[index]]);\n  }\n\n  const ans = kmeans(chosendata, k, { initialization: centers }).clusters;\n\n  const getColor = (str: string | number) => {\n    const hue = (str.toString().charCodeAt(0) * 147) % 360;\n    return `hsl(${hue}, 75%, 60%)`;\n  };\n\n  const processedData = data.map((item, index) => ({\n    ...item,\n    color: rgbToHex(hslToRgb(getColor(ans[index]))),\n    opacity: 0.25\n  }));\n\n  client.writeData({\n    data: {\n      colors: processedData.map(item => item.color)\n    }\n  });\n\n  return processedData;\n};\n\nexport default clustering;\n","import React, { useState, useEffect } from 'react';\nimport { Pokemon } from '../../consts/Pokemon';\nimport data from '../../data/data.json';\nimport { MarkSeriesPoint } from 'react-vis';\nimport clustering from '../../utils/clustering';\nimport { useApolloClient } from '@apollo/react-hooks';\n\ntype Props = { x?: string; y?: string; k: number };\n\nconst useScatterData = (props: Props) => {\n  const client = useApolloClient();\n  const [scatterData, setScatterData] = useState<MarkSeriesPoint[] | undefined>(\n    undefined\n  );\n\n  useEffect(() => {\n    if (props.x !== null && props.y !== null) {\n      const array = data.reduce((prev, curr) => {\n        const x = curr[props.x! as keyof Pokemon];\n        const y = curr[props.y! as keyof Pokemon];\n        if (x === null || y === null) return prev;\n        return [\n          ...prev,\n          {\n            id: curr.Number,\n            name: curr.Name,\n            x: x === false || x === true ? x.toString() : x,\n            y: y === false || y === true ? y.toString() : y,\n            size: 1\n          }\n        ];\n      }, [] as MarkSeriesPoint[]);\n      setScatterData(clustering(array, client, props.k));\n    }\n    return undefined;\n  }, [client, props.k, props.x, props.y]);\n\n  return scatterData;\n};\n\nexport default useScatterData;\n","import React from 'react';\nimport Select from 'react-select';\nimport { useApolloClient, useMutation } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\n\nexport type Props = {\n  domain: string;\n  target: string;\n  value?: string;\n  position?: number;\n};\n\nconst options = [\n  'Number',\n  'Total',\n  'HP',\n  'Attack',\n  'Defense',\n  'Sp_Atk',\n  'Sp_Def',\n  'Speed',\n  'Generation',\n  'Pr_Male',\n  'Height_m',\n  'Weight_kg',\n  'Catch_Rate'\n].map(item => ({ value: item, label: item }));\n\nconst UPDATE_PARALLEL = gql`\n  mutation UpdateParallel($target: String!, $position: Integer) {\n    updateParallel(target: $target, position: $position) @client\n  }\n`;\n\nconst Selector: React.FC<Props> = (props: Props) => {\n  const client = useApolloClient();\n  const [updateParallel] = useMutation(UPDATE_PARALLEL);\n\n  const update = (option: any) => {\n    switch (props.domain) {\n      case 'scatter':\n        client.writeData({\n          data: {\n            [props.domain]: {\n              [props.target]: option.value,\n              __typename: props.domain\n            }\n          }\n        });\n        break;\n      case 'parallel':\n        updateParallel({\n          variables: { target: option.value, position: props.position }\n        });\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <>\n      <Select options={options} onChange={update} placeholder={props.value} />\n    </>\n  );\n};\n\nexport default Selector;\n","import React from 'react';\nimport { Typography, Grid } from '@material-ui/core';\nimport Selector from '../atoms/Selector';\nimport { Props as SelectorProps } from '../atoms/Selector';\n\ntype Props = SelectorProps;\n\nconst SelectorPanel: React.FC<Props> = (props: Props) => {\n  return (\n    <>\n      <Grid\n        container\n        item\n        xs={12}\n        sm={12}\n        md={12}\n        lg={12}\n        xl={12}\n        alignItems={'baseline'}\n      >\n        <Grid item xs={2} sm={2} md={2} lg={2} xl={2}>\n          <Typography variant={'body1'}>{props.target}</Typography>\n        </Grid>\n        <Grid item xs={10} sm={10} md={10} lg={10} xl={10}>\n          <Selector {...props} />\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default SelectorPanel;\n","import React from 'react';\nimport Select from 'react-select';\nimport { useApolloClient, useMutation } from '@apollo/react-hooks';\nimport { Slider as MuiSlider, makeStyles } from '@material-ui/core';\n\nexport type Props = { initial: number };\n\nconst useStyles = makeStyles({\n  bar: {\n    width: '100%',\n    position: 'relative',\n    zIndex: 0\n  }\n});\n\nconst Slider: React.FC<Props> = (props: Props) => {\n  const client = useApolloClient();\n  const handleChange = (_event: any, value: any) => {\n    client.writeData({\n      data: { scatter: { k: value, __typename: 'scatter' } }\n    });\n  };\n  const classes = useStyles();\n\n  return (\n    <>\n      <MuiSlider\n        onChange={handleChange}\n        className={classes.bar}\n        max={8}\n        min={1}\n        defaultValue={props.initial}\n        valueLabelDisplay={'on'}\n      />\n    </>\n  );\n};\n\nexport default Slider;\n","import React from 'react';\nimport { Typography, Grid } from '@material-ui/core';\nimport Slider from '../atoms/Slider';\nimport { Props as SliderProps } from '../atoms/Slider';\n\ntype Props = SliderProps;\n\nconst SliderPanel: React.FC<Props> = (props: Props) => {\n  return (\n    <>\n      <Grid\n        container\n        item\n        xs={12}\n        sm={12}\n        md={12}\n        lg={12}\n        xl={12}\n        alignItems={'center'}\n      >\n        <Grid item xs={2} sm={2} md={2} lg={2} xl={2}>\n          <Typography variant={'body1'}>k</Typography>\n        </Grid>\n        <Grid item xs={10} sm={10} md={10} lg={10} xl={10}>\n          <Slider {...props} />\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default SliderPanel;\n","import React, { useEffect, useRef, useState } from 'react';\nimport {\n  XYPlot,\n  XAxis,\n  MarkSeries,\n  YAxis,\n  HorizontalGridLines,\n  VerticalGridLines,\n  MarkSeriesPoint,\n  Hint\n} from 'react-vis';\nimport useScatterData from '../uses/useScatterData';\nimport SelectorPanel from '../molecules/SelectorPanel';\nimport { Grid, Typography } from '@material-ui/core';\nimport { useApolloClient } from '@apollo/react-hooks';\nimport SliderPanel from '../molecules/SliderPanel';\nimport { useWindowSize } from 'react-use';\n\nexport type Props = {\n  title: string;\n  x?: string;\n  y?: string;\n  k: number;\n};\n\ntype ToolTip = {\n  id: number;\n  x: number;\n  y: number;\n  name: string;\n};\n\nconst Scatter: React.FC<Props> = (props: Props) => {\n  const client = useApolloClient();\n\n  const ref = useRef<HTMLDivElement>(null);\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 });\n  const scatterData = useScatterData({\n    x: props.x,\n    y: props.y,\n    k: props.k\n  });\n  const [tooltip, setTooltip] = useState<ToolTip | undefined>(undefined);\n\n  const [temp, setTemp] = useState<any | undefined>(undefined);\n  const onValueClick = (node: any, event: any) => {\n    if (temp !== undefined) {\n      scatterData![temp.id - 1].color = temp.color;\n      scatterData![temp.id - 1].opacity = 0.25;\n    }\n    setTemp({ id: node.id, color: node.color });\n    scatterData![node.id - 1].color = '#222222';\n    scatterData![node.id - 1].opacity = 1;\n    client.writeData({\n      data: {\n        details: {\n          title: 'details',\n          id: node.id,\n          __typename: 'details'\n        }\n      }\n    });\n  };\n  const window = useWindowSize();\n\n  const onMouseOver = (node: any, event: any) => {\n    setTooltip({ x: node.x, y: node.y, id: node.id, name: node.name });\n  };\n  const onMouseOut = (node: any, event: any) => {\n    setTooltip(undefined);\n  };\n  useEffect(() => {\n    setContainerSize({\n      width: ref.current!.getBoundingClientRect().width,\n      height: ref.current!.getBoundingClientRect().height\n    });\n  }, [window]);\n\n  return (\n    <Grid\n      container\n      item\n      ref={ref}\n      className={'component'}\n      alignContent={'center'}\n    >\n      <Grid container item xs={8} sm={8} md={8} lg={8} xl={8}>\n        {scatterData !== undefined ? (\n          <XYPlot\n            width={containerSize.width / 1.55}\n            height={containerSize.height * 0.78}\n          >\n            <HorizontalGridLines />\n            <VerticalGridLines />\n            <XAxis title={props.x} />\n            <YAxis title={props.y} />\n            <MarkSeries\n              data={scatterData}\n              onValueClick={onValueClick}\n              strokeWidth={0.01}\n              colorType=\"literal\"\n              onValueMouseOver={onMouseOver}\n              onValueMouseOut={onMouseOut}\n            />\n            {tooltip !== undefined ? <Hint value={tooltip} /> : null}\n          </XYPlot>\n        ) : (\n          <Typography>'Please select axes'</Typography>\n        )}\n      </Grid>\n\n      <Grid\n        container\n        item\n        xs={4}\n        sm={4}\n        md={4}\n        lg={4}\n        xl={4}\n        justify=\"flex-start\"\n        alignItems=\"center\"\n      >\n        <SelectorPanel domain={'scatter'} target={'x'} value={props.x} />\n        <SelectorPanel domain={'scatter'} target={'y'} value={props.y} />\n        <SliderPanel initial={2} />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Scatter;\n","import { useState, useEffect } from 'react';\nimport { Pokemon } from '../../consts/Pokemon';\nimport data from '../../data/data.json';\n\ntype Props = { id?: number };\n\nconst useDetailsData = (props: Props) => {\n  const [detailsData, setDetailsData] = useState<Pokemon | undefined>(\n    undefined\n  );\n\n  useEffect(() => {\n    if (props.id !== undefined) {\n      setDetailsData(data.find(item => item.Number === props.id));\n    }\n  }, [props.id]);\n\n  return detailsData;\n};\n\nexport default useDetailsData;\n","import React, { useRef, useState, useEffect } from 'react';\nimport { Typography, Grid, Box } from '@material-ui/core';\nimport useDetailsData from '../uses/useDetailsData';\n\nexport type Props = { id: number };\n\nconst Details: React.FC<Props> = (props: Props) => {\n  const detailsData = useDetailsData({\n    id: props.id\n  });\n\n  const ref = useRef<HTMLDivElement>(null);\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 });\n\n  let subset;\n  let imgSrc;\n\n  if (detailsData !== undefined) {\n    subset = Object.entries(detailsData).filter(\n      item =>\n        item[0] === 'Number' ||\n        item[0] === 'Name' ||\n        item[0] === 'Type_1' ||\n        item[0] === 'HP' ||\n        item[0] === 'Attack' ||\n        item[0] === 'Defense' ||\n        item[0] === 'Sp_Atk' ||\n        item[0] === 'Sp_def' ||\n        item[0] === 'Speed' ||\n        item[0] === 'Generation' ||\n        item[0] === 'Height_m' ||\n        item[0] === 'Weight_kg'\n    );\n\n    imgSrc =\n      'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/' +\n      subset.find(item => item[0] === 'Number')![1] +\n      '.png';\n  }\n\n  useEffect(() => {\n    console.log(ref.current);\n    setContainerSize({\n      width: ref.current!.getBoundingClientRect().width,\n      height: ref.current!.getBoundingClientRect().height\n    });\n  }, []);\n\n  return (\n    <Grid\n      item\n      container\n      xs={12}\n      sm={12}\n      md={12}\n      lg={12}\n      xl={12}\n      style={{ height: 'calc(25vh - 1rem)' }}\n      ref={ref}\n      className={'component'}\n      alignContent={'space-around'}\n    >\n      {subset !== undefined ? (\n        <>\n          <Grid\n            item\n            container\n            xs={3}\n            sm={3}\n            md={3}\n            lg={3}\n            xl={3}\n            justify={'center'}\n            alignContent={'space-around'}\n          >\n            <img src={imgSrc} height={containerSize.height - 32}></img>\n          </Grid>\n          <Grid\n            item\n            container\n            xs={3}\n            sm={3}\n            md={3}\n            lg={3}\n            xl={3}\n            justify={'center'}\n            alignContent={'space-around'}\n          >\n            {subset.slice(0, 2).map(([key, value]) => (\n              <Grid\n                item\n                container\n                xs={12}\n                sm={12}\n                md={12}\n                lg={12}\n                xl={12}\n                direction={'column'}\n              >\n                <Typography variant={'h6'}>{key}</Typography>\n                <Typography variant={'h3'}>{value?.toString()}</Typography>\n              </Grid>\n            ))}\n          </Grid>\n          <Grid\n            item\n            container\n            xs={6}\n            sm={6}\n            md={6}\n            lg={6}\n            xl={6}\n            justify={'center'}\n            alignContent={'space-around'}\n          >\n            {subset.slice(2).map(([key, value]) => (\n              <Grid item container xs={4} sm={4} md={4} lg={4} xl={4}>\n                <Typography variant={'body1'}>\n                  {key}: {value?.toString()}\n                </Typography>\n              </Grid>\n            ))}\n          </Grid>\n        </>\n      ) : (\n        <Typography>\n          Click any mark to show the details of a pokemon.\n        </Typography>\n      )}\n    </Grid>\n  );\n};\n\nexport default Details;\n","import { useState, useEffect } from 'react';\nimport { Pokemon } from '../../consts/Pokemon';\nimport data from '../../data/data.json';\nimport { LineSeriesPoint } from 'react-vis';\nimport useHighlight from './useHighlight';\n\ntype Props = { targets: { position: number; name: string }[] };\n\nconst useParallelData = (props: Props) => {\n  const targets = props.targets.map(item => item.name);\n  const [parallelData, setParallelData] = useState<\n    LineSeriesPoint[][] | undefined\n  >(undefined);\n  const [domains, setDomains] = useState<Record<string, any> | undefined>(\n    undefined\n  );\n\n  useEffect(() => {\n    if (props.targets !== undefined) {\n      const domains = targets.reduce((prev, curr) => {\n        const array = data.map(item => item[curr as keyof Pokemon]) as number[];\n        return {\n          ...prev,\n          [curr]: [Math.min(...array), Math.max(...array)]\n        };\n      }, {});\n\n      setDomains(domains);\n\n      if (domains !== undefined) {\n        setParallelData(\n          data.map(item => {\n            return targets.reduce((prev, curr) => {\n              return [\n                ...prev,\n                {\n                  x: curr,\n                  y:\n                    ((item[curr as keyof Pokemon] as number) -\n                      (domains as any)[curr][0]) /\n                    ((domains as any)[curr][1] - (domains as any)[curr][0])\n                }\n              ];\n            }, [] as LineSeriesPoint[]);\n          })\n        );\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.targets]);\n\n  return [parallelData, domains];\n};\n\nexport default useParallelData;\n","import { useState, useEffect } from 'react';\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst query = gql`\n  {\n    colors\n  }\n`;\n\nconst useColor = () => {\n  const { data } = useQuery(query);\n\n  return data.colors;\n};\n\nexport default useColor;\n","import { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst query = gql`\n  {\n    details {\n      id\n    }\n  }\n`;\n\nconst useHighlight = () => {\n  const { data } = useQuery(query);\n\n  return data.details.id;\n};\n\nexport default useHighlight;\n","import React, { useRef, useState, useEffect } from 'react';\nimport { XYPlot, LineSeries, DecorativeAxis, LabelSeries } from 'react-vis';\nimport useParallelData from '../uses/useParallelData';\nimport SelectorPanel from '../molecules/SelectorPanel';\nimport { Grid, makeStyles } from '@material-ui/core';\nimport useColor from '../uses/useColor';\nimport useHighlight from '../uses/useHighlight';\nimport { useWindowSize } from 'react-use';\n\nexport type Props = { targets: { position: number; name: string }[] };\n\nconst useStyles = makeStyles({\n  selectorPanel: {\n    height: 'calc(25vh - 1rem - 8px)'\n  },\n  parallel: {\n    height: 'calc(75vh - 3rem - 24px)'\n  }\n});\n\nconst Parallel: React.FC<Props> = (props: Props) => {\n  const classes = useStyles();\n  const [parallelData, domains] = useParallelData({\n    targets: props.targets\n  });\n\n  const ref = useRef<HTMLDivElement>(null);\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 });\n\n  const colors = useColor();\n  const windowSize = useWindowSize();\n  const highlight = useHighlight();\n\n  useEffect(() => {\n    setContainerSize({\n      width: ref.current!.getBoundingClientRect().width,\n      height: ref.current!.getBoundingClientRect().height\n    });\n  }, [windowSize]);\n\n  return (\n    <Grid\n      item\n      container\n      xs={12}\n      sm={12}\n      md={12}\n      lg={12}\n      xl={12}\n      className={'component'}\n      alignContent={'space-around'}\n    >\n      <Grid\n        item\n        container\n        xs={12}\n        sm={12}\n        md={12}\n        lg={12}\n        xl={12}\n        alignContent={'space-around'}\n        className={classes.selectorPanel}\n      >\n        {Array(6)\n          .fill(0)\n          .map((_i, index) => (\n            <Grid item container xs={6} sm={6} md={6} lg={6} xl={6}>\n              <SelectorPanel\n                domain={'parallel'}\n                target={`Axis ${index + 1}`}\n                value={props.targets[index]?.name}\n                position={index}\n              />\n            </Grid>\n          ))}\n      </Grid>\n      <Grid\n        item\n        container\n        xs={12}\n        sm={12}\n        md={12}\n        lg={12}\n        xl={12}\n        ref={ref}\n        className={classes.parallel}\n        justify={'center'}\n      >\n        <XYPlot\n          width={containerSize.width * 0.8}\n          height={containerSize.height}\n          xType=\"ordinal\"\n          margin={{ top: 15, left: 0, bottom: 15, right: 0 }}\n        >\n          {parallelData !== undefined\n            ? parallelData!.map(\n                (\n                  item:\n                    | (any[] | import('react-vis').LineSeriesPoint)[]\n                    | undefined,\n                  index: React.ReactText\n                ) => {\n                  return (\n                    <LineSeries\n                      data={item}\n                      color={highlight === index ? '#222222' : colors[index]}\n                      opacity={highlight === index ? 1 : 0.15}\n                    />\n                  );\n                }\n              )\n            : null}\n          {parallelData !== undefined\n            ? parallelData![0].map(\n                (item: { x: React.ReactText }, index: any) => {\n                  return [\n                    [\n                      <DecorativeAxis\n                        key={`${index}-axis`}\n                        axisStart={{ x: item.x, y: 0 }}\n                        axisEnd={{ x: item.x, y: 1 }}\n                        axisDomain={[domains![item.x][0], domains![item.x][1]]}\n                      />,\n                      <LabelSeries\n                        data={[\n                          {\n                            x: item.x,\n                            y: -0.04,\n                            label: item.x.toString(),\n                            style: { fontSize: 14 }\n                          }\n                        ]}\n                      />\n                    ]\n                  ];\n                }\n              )\n            : null}\n        </XYPlot>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Parallel;\n","import React from 'react';\nimport { AppBar, Grid, Typography } from '@material-ui/core';\nimport classes from '*.module.css';\n\ntype Props = {};\n\nconst Header: React.FC<Props> = (props: Props) => {\n  return (\n    <AppBar\n      position=\"sticky\"\n      style={{ backgroundColor: '#002855', height: '4rem' }}\n    >\n      <Grid container justify={'space-between'} alignItems={'center'}>\n        <Typography variant=\"h6\" style={{ margin: '1rem 3rem' }}>\n          ECS272-2020 Assignment 3\n        </Typography>\n        <Typography variant=\"h4\" style={{ margin: '0 3rem' }}>\n          Po-K-Means\n        </Typography>\n        <Typography variant=\"body1\" style={{ margin: '1rem 3rem' }}>\n          Keita Makino, Alice Dagmar Helena Lundvall\n        </Typography>\n      </Grid>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","/* eslint-disable @typescript-eslint/camelcase */\nimport React from 'react';\nimport { Grid, makeStyles } from '@material-ui/core';\nimport Scatter, { Props as ScatterProps } from '../organisms/Scatter';\nimport Details, { Props as DetailsProps } from '../organisms/Details';\nimport Parallel, { Props as ParallelProps } from '../organisms/Parallel';\nimport Header from '../organisms/Header';\n\ntype Props = {\n  scatter: ScatterProps;\n  details: DetailsProps;\n  parallel: ParallelProps;\n};\n\nconst useStyles = makeStyles({\n  main: {\n    height: 'calc(100vh - 4rem)',\n    backgroundColor: '#FBF6E5'\n  },\n  scatter: {\n    height: 'calc(75vh - 3rem)'\n  },\n  details: {\n    height: 'calc(25vh - 1rem)'\n  },\n  parallel: {\n    height: 'calc(100vh - 4rem)'\n  },\n  visBox: {\n    boxShadow: 'inset 0 0 8px -3px #002855',\n    '& .component': {\n      padding: '16px'\n    },\n    '& .rv-xy-plot': {\n      backgroundColor: '#FFFFFF'\n    }\n  }\n});\n\nconst Index: React.FC<Props> = (props: Props) => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Grid item container xs={12} sm={12} md={12} lg={12} xl={12}>\n        <Header />\n      </Grid>\n      <Grid\n        item\n        container\n        xs={12}\n        sm={12}\n        md={12}\n        lg={12}\n        xl={12}\n        className={classes.main}\n      >\n        {/* grid for scatter */}\n        <Grid container item xs={12} sm={12} md={12} lg={8} xl={8}>\n          <Grid\n            container\n            item\n            xs={12}\n            sm={12}\n            md={12}\n            lg={12}\n            xl={12}\n            className={`${classes.scatter} ${classes.visBox}`}\n          >\n            <Scatter {...props.scatter} />\n          </Grid>\n          <Grid\n            container\n            item\n            xs={12}\n            sm={12}\n            md={12}\n            lg={12}\n            xl={12}\n            className={`${classes.details} ${classes.visBox}`}\n          >\n            <Details id={props.details.id} />\n          </Grid>\n        </Grid>\n\n        {/* grid for parallel & detail */}\n        <Grid\n          container\n          item\n          xs={12}\n          sm={12}\n          md={12}\n          lg={4}\n          xl={4}\n          className={`${classes.parallel} ${classes.visBox}`}\n        >\n          <Parallel targets={props.parallel.targets} />\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default Index;\n","import React from 'react';\nimport IndexTemplate from '../components/templates/Index';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\n\ntype Props = {};\n\nconst query = gql`\n  {\n    scatter {\n      title\n      x\n      y\n      k\n    }\n    parallel {\n      title\n      targets {\n        position\n        name\n      }\n    }\n    details {\n      title\n      id\n    }\n  }\n`;\nconst Index: React.FC<Props> = (props: Props) => {\n  const { data } = useQuery(query);\n  return (\n    <IndexTemplate\n      scatter={data.scatter}\n      details={data.details}\n      parallel={data.parallel}\n    />\n  );\n};\n\nexport default Index;\n","import { gql } from 'apollo-boost';\n\nexport default {\n  Mutation: {\n    updateParallel: (\n      _root: any,\n      variables: { position: any; target: any },\n      { cache, getCacheKey }: any\n    ) => {\n      const id = getCacheKey({\n        __typename: 'parallel',\n        id: 1\n      });\n      const fragment = gql`\n        fragment targets on Parallel {\n          targets {\n            position\n            name\n          }\n        }\n      `;\n      const parallel = cache.readFragment({ fragment, id });\n      const data = {\n        title: parallel.title,\n        targets: [\n          ...parallel.targets.filter(\n            (item: { position: any }) => item.position !== variables.position\n          ),\n          {\n            position: variables.position,\n            name: variables.target,\n            __typename: 'target'\n          }\n        ].sort((a, b) => (a.position < b.position ? -1 : 1))\n      };\n      cache.writeData({ id, data });\n      return null;\n    }\n  }\n};\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Index from './pages/Index';\nimport { Grid } from '@material-ui/core';\n\nimport ApolloClient, { InMemoryCache, gql } from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport data from './data/initialState';\nimport resolvers from './resolvers';\n\nconst cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n  cache: cache,\n  typeDefs: '',\n  resolvers: resolvers\n});\n\ncache.writeData({\n  data\n});\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <ApolloProvider client={client}>\n        <Grid container xs={12} sm={12} md={12} lg={12} xl={12}>\n          <Index />\n        </Grid>\n      </ApolloProvider>\n    </div>\n  );\n};\n\nexport default App;\n","export default {\n  scatter: {\n    title: 'scatter',\n    x: 'Attack',\n    y: 'Defense',\n    k: 2,\n    __typename: 'scatter'\n  },\n  parallel: {\n    id: 1,\n    title: 'parallel',\n    targets: [\n      { position: 0, name: 'Attack', __typename: 'target' },\n      { position: 1, name: 'Defense', __typename: 'target' }\n    ],\n    __typename: 'parallel'\n  },\n  details: {\n    title: 'details',\n    id: null,\n    __typename: 'details'\n  },\n  colors: []\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}